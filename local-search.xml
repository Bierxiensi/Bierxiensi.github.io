<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue撸教程2.x（一）</title>
    <link href="undefined2019/10/30/Vue%E6%92%B8%E6%95%99%E7%A8%8B2.x%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>2019/10/30/Vue%E6%92%B8%E6%95%99%E7%A8%8B2.x%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h1><h2 id="1-1、兼容性与更新日志"><a href="#1-1、兼容性与更新日志" class="headerlink" title="1.1、兼容性与更新日志"></a>1.1、兼容性与更新日志</h2><p>兼容性这里涉及到ECMAScript发展历史等知识，javascript这块很大，对于前端也很重要，接下来应该单独跟进一个javascript系列博客<br>目前javascript这块的学习阶段还是集中在红宝书上，总之IE8以下的版本还是不支持的。vue的更新日志持续关注吧。</p><h2 id="1-2、vue开发工具"><a href="#1-2、vue开发工具" class="headerlink" title="1.2、vue开发工具"></a>1.2、vue开发工具</h2><p>一个是在html页面引入(制作原型或学习)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>还一个就是vue-cli脚手架了 搭建过程有空还是写篇博客附上来<br>至于不同版本的vue就取决于构建环境和生产环境了</p><h2 id="1-3、命令行工具（cli）"><a href="#1-3、命令行工具（cli）" class="headerlink" title="1.3、命令行工具（cli）"></a>1.3、命令行工具（cli）</h2><p>这是一个单独的小模块<br>配合之前的vue-cli脚手架博客理解</p><h2 id="1-4、对不同构建版本的解释"><a href="#1-4、对不同构建版本的解释" class="headerlink" title="1.4、对不同构建版本的解释"></a>1.4、对不同构建版本的解释</h2><h3 id="1-4-1、术语"><a href="#1-4-1、术语" class="headerlink" title="1.4.1、术语"></a>1.4.1、术语</h3><p>讲的比较清晰吧</p><blockquote><p>完整版：同时包含编译器和运行时的版本。<br>编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码。<br>运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</p></blockquote><p>剩下的暂时没接触</p><h3 id="1-4-2、运行时-编译器-vs-只包含运行时"><a href="#1-4-2、运行时-编译器-vs-只包含运行时" class="headerlink" title="1.4.2、运行时 + 编译器 vs. 只包含运行时"></a>1.4.2、运行时 + 编译器 vs. 只包含运行时</h3><p>这个讲的也比较清晰<br>当使用vue-loader或vueify的时候，*.vue文件内部的模板会在构建时预编译成JavaScript<br>这时候可以使用不包含编译器的vue版本即运行版本，应该是节省了服务器资源、提高了运行效率吧，毕竟不需判断执行编译模块了<br>webpack什么的具体配置也给了就不放了</p><p>例子也很清晰，看样子render函数就实现了挂载vue组件到DOM上的编译</p><pre><code>// 需要编译器new Vue({  template: '<div>{{ hi }}</div>'})// 不需要编译器new Vue({  render (h) {    return h('div', this.hi)  }})</code></pre><h3 id="1-4-3、开发环境-vs-生产环境模式-、CSP-环境"><a href="#1-4-3、开发环境-vs-生产环境模式-、CSP-环境" class="headerlink" title="1.4.3、开发环境 vs. 生产环境模式 、CSP 环境"></a>1.4.3、开发环境 vs. 生产环境模式 、CSP 环境</h3><p>需要研究一下 待续。。。</p><h2 id="1-5、开发版本"><a href="#1-5、开发版本" class="headerlink" title="1.5、开发版本"></a>1.5、开发版本</h2><p>同上</p><h2 id="1-6、AMD模块加载器"><a href="#1-6、AMD模块加载器" class="headerlink" title="1.6、AMD模块加载器"></a>1.6、AMD模块加载器</h2><p>同上</p>]]></content>
    
    
    <categories>
      
      <category>review</category>
      
      <category>Vue撸教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue-cli</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker学习笔记(一)</title>
    <link href="undefined2019/10/30/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>2019/10/30/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>#学习初衷</p><blockquote><p>我们需要的不是前端或者后端，而是能解决问题的人。</p><footer><strong>[by-PM]</strong></footer></blockquote><p>作为一个前端，或者说api调用者，对本地测试完merger代码后的过程一无所知实在是一件可笑的事情。</p><h1 id="1、why-pick-docker？"><a href="#1、why-pick-docker？" class="headerlink" title="1、why pick docker？"></a>1、why pick docker？</h1><p>项目驱动</p><h1 id="2、what-is-docker？"><a href="#2、what-is-docker？" class="headerlink" title="2、what is docker？"></a>2、what is docker？</h1><h2 id="2-1、官网上如是说"><a href="#2-1、官网上如是说" class="headerlink" title="2.1、官网上如是说"></a>2.1、官网上如是说</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89whatisdocker%EF%BC%881%EF%BC%89.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><p>大概就是说，这是一个XXXX平台，允许你XXXX操作，使用了docker你可以XXXX，省时省力爽到起飞，就是一句话—好用。还说了什么呢？</p><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89whatisdocker%EF%BC%882%EF%BC%89.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><p>通俗的说</p><blockquote><p>Docker 可理解为跑在宿主机上的非常精简、小巧、高度浓缩的虚拟机。 它可以将容器里的进程安稳的在宿主机上运行。<br>Docker重要的三个概念必须要知道：<br>Image: 镜像<br>Container: 容器<br>Repository： 镜像仓库<br>为了好理解 我们从 Docker 的 Logo 入手<br>图片是一条鲸鱼游在海里 身上载着N个集装箱，下面是Docker字样。OK 图片描述完毕<br>图片给出的信息：<br>-海：宿主机<br>-集装箱：Docker容器<br>-鲸鱼+集装箱：Docker技术<br>也就是说：Docker容器（集装箱）里可以存放着我们写的代码，然后 Docker 载着代码在大海（宿主机）里运行<br>之所以用鲸鱼，可能是它在海里没什么天敌 体型又巨大而且游泳速度很快，毕竟Docker使用GO语言写的呢。</p><footer><strong>@alwaysVe</strong><cite><a href="https://segmentfault.com/a/1190000019487122" target="_blank" rel="noopener">segmentfault.com/a/1190000019487122</a></cite></footer></blockquote><h2 id="2-2、Docker重要的三个概念必须要知道："><a href="#2-2、Docker重要的三个概念必须要知道：" class="headerlink" title="2.2、Docker重要的三个概念必须要知道："></a>2.2、Docker重要的三个概念必须要知道：</h2><p>Image: 镜像<br>Container: 容器<br>Repository： 镜像仓库</p><h2 id="2-3、keys："><a href="#2-3、keys：" class="headerlink" title="2.3、keys："></a>2.3、keys：</h2><blockquote><p>1：属于 Linux 容器的一种封装，提供简单易用的容器使用接口。<br>2：将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。<br>程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样.</p><footer><strong>@alwaysVe</strong><cite><a href="https://segmentfault.com/a/1190000019487122" target="_blank" rel="noopener">segmentfault.com/a/1190000019487122</a></cite></footer></blockquote><blockquote><p>上文中只说了Container，而Image与Container的关系 就像类与实例的关系:<br>var p1 = new Person();<br>即：p1是容器、Person是镜像。</p><footer><strong>@weixin_33895657</strong><cite><a href="https://blog.csdn.net/weixin_33895657/article/details/93167085" target="_blank" rel="noopener">blog.csdn.net/weixin_33895657/article/details/93167085</a></cite></footer></blockquote><h1 id="3、docker安装"><a href="#3、docker安装" class="headerlink" title="3、docker安装"></a>3、docker安装</h1><h2 id="step1-进入官网-get-docker"><a href="#step1-进入官网-get-docker" class="headerlink" title="step1 进入官网 get docker"></a>step1 进入官网 get docker</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install1.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><h2 id="step2-get-docker-engine-我的操作系统是windows10-选择windows-engine"><a href="#step2-get-docker-engine-我的操作系统是windows10-选择windows-engine" class="headerlink" title="step2 get docker engine 我的操作系统是windows10 选择windows engine"></a>step2 get docker engine 我的操作系统是windows10 选择windows engine</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install2.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><h2 id="step3-环境需求-可以看到docker-for-win支持win10-需要Hyper-V虚拟机"><a href="#step3-环境需求-可以看到docker-for-win支持win10-需要Hyper-V虚拟机" class="headerlink" title="step3 环境需求 可以看到docker for win支持win10 需要Hyper-V虚拟机"></a>step3 环境需求 可以看到docker for win支持win10 需要Hyper-V虚拟机</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install3.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><h2 id="看来安装教程不怎么友好"><a href="#看来安装教程不怎么友好" class="headerlink" title="看来安装教程不怎么友好"></a>看来安装教程不怎么友好</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install4.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><h2 id="step4-我的环境-windows10家庭版"><a href="#step4-我的环境-windows10家庭版" class="headerlink" title="step4 我的环境 windows10家庭版"></a>step4 我的环境 windows10家庭版</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install5.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><h2 id="step5-docker对windows不同版本的支持"><a href="#step5-docker对windows不同版本的支持" class="headerlink" title="step5 docker对windows不同版本的支持"></a>step5 docker对windows不同版本的支持</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install6.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install7.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><blockquote><p>最早的docker只能运行在linux上，所以以前如果想在win上使用docker只能通过虚拟机的方式。不过，近两年微软和docker达成了合作关系，也开发出了基于windows的docker引擎。<br>如果去网上查资料的话，大部分都比较老旧，会让你下载安装docker toolbox，但它总体来说不如docker for windows方便，所以此处不考虑toolbox的安装。（PS：toolbox和docker for windows不能很好的共存，同时安装会出现错误。而且即使安装过toolbox后再卸载之后安装docker for win也会出现一些错误，我下面会提到一些）<br>另外，很重要的一点，docker for win目前只支持win10，其他版本的win系统目前只能使用toolbox.</p><footer><strong>@zhuiyisinian</strong><cite><a href="https://blog.csdn.net/zhuiyisinian/article/details/88700889" target="_blank" rel="noopener">blog.csdn.net/zhuiyisinian/article/details/88700889</a></cite></footer></blockquote><h2 id="step6"><a href="#step6" class="headerlink" title="step6"></a>step6</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install8.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><p>可以看到 windows10家庭版是没有Hyper-V虚拟机的  现在就有两个选择了<br>方案一：通过docker toolbox来安装<br>方案二：hyper时win10自带一个虚拟机，安装Hyper-V虚拟机<br>我选择方案一安装Hyper-V虚拟机，注意查看处理器是否支持虚拟化技术，不支持的话，就别费劲找回Hyper-V功能了</p><h2 id="step7-systeminfo-查看处理器是否支持虚拟化技术-重点信息的最后，4个要求全都是“是”，确定电脑支持虚拟化技术。"><a href="#step7-systeminfo-查看处理器是否支持虚拟化技术-重点信息的最后，4个要求全都是“是”，确定电脑支持虚拟化技术。" class="headerlink" title="step7 systeminfo 查看处理器是否支持虚拟化技术 重点信息的最后，4个要求全都是“是”，确定电脑支持虚拟化技术。"></a>step7 systeminfo 查看处理器是否支持虚拟化技术 重点信息的最后，4个要求全都是“是”，确定电脑支持虚拟化技术。</h2><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install9.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><h2 id="step8-将如下代码添加到记事本中，并另存为Hyper-V-cmd文件，之后以管理员身份打开这个文件，重启完成就能使用功能完整的Hyper-V了。（注意添加功能需要联网哦）"><a href="#step8-将如下代码添加到记事本中，并另存为Hyper-V-cmd文件，之后以管理员身份打开这个文件，重启完成就能使用功能完整的Hyper-V了。（注意添加功能需要联网哦）" class="headerlink" title="step8 将如下代码添加到记事本中，并另存为Hyper-V.cmd文件，之后以管理员身份打开这个文件，重启完成就能使用功能完整的Hyper-V了。（注意添加功能需要联网哦）"></a>step8 将如下代码添加到记事本中，并另存为Hyper-V.cmd文件，之后以管理员身份打开这个文件，重启完成就能使用功能完整的Hyper-V了。（注意添加功能需要联网哦）</h2><pre><code class="$xslt">pushd &quot;%~dp0&quot;dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txtfor /f %%i in (&apos;findstr /i . hyper-v.txt 2^&gt;nul&apos;) do dism /online /norestart /add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;del hyper-v.txtDism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL</code></pre><h2 id="step9-安装完成-重启电脑-查看程序信息-可以看到已经安装完成"><a href="#step9-安装完成-重启电脑-查看程序信息-可以看到已经安装完成" class="headerlink" title="step9 安装完成 重启电脑 查看程序信息 可以看到已经安装完成"></a>step9 安装完成 重启电脑 查看程序信息 可以看到已经安装完成</h2><p>PS:安装了Hyper-v之后，virtualbox和vmware之类的虚拟机就无法使用，具体解决方法自行百度</p><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install10.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><img src="/img/docker/docker%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89install11.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><h2 id="然而看到这位仁兄的操作后还是放弃家庭版安装了-改完注册表后还是绕不开家庭版检查-没办法-不想重新装系统-只能选择方案一"><a href="#然而看到这位仁兄的操作后还是放弃家庭版安装了-改完注册表后还是绕不开家庭版检查-没办法-不想重新装系统-只能选择方案一" class="headerlink" title="然而看到这位仁兄的操作后还是放弃家庭版安装了 改完注册表后还是绕不开家庭版检查 没办法 不想重新装系统 只能选择方案一"></a>然而看到这位仁兄的操作后还是放弃家庭版安装了 改完注册表后还是绕不开家庭版检查 没办法 不想重新装系统 只能选择方案一</h2><blockquote><footer><strong>@颹蕭蕭</strong><cite><a href="https://blog.csdn.net/itnerd/article/details/88920230" target="_blank" rel="noopener">blog.csdn.net/itnerd/article/details/88920230</a></cite></footer></blockquote><p>##待续</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elgg 系统 CSRF 攻击实验</title>
    <link href="undefined2019/10/23/Elgg%20%E7%B3%BB%E7%BB%9F%20CSRF%20%E6%94%BB%E5%87%BB%E5%AE%9E%E9%AA%8C/"/>
    <url>2019/10/23/Elgg%20%E7%B3%BB%E7%BB%9F%20CSRF%20%E6%94%BB%E5%87%BB%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>CSRF攻击涉及用户受害者、受信任的网站和恶意网站。<br>当受害者与受信任的站点拥有一个活跃的会话的同时，如果访问恶意网站，<br>恶意网站会注入一个HTTP请求到受信任的站点，从而破话用户的信息。</p><a id="more"></a><p>#实验背景<br>CSRF 攻击总是涉及到三个角色：信赖的网站（Collabtive）、受害者的 session 或 cookie 以及一个恶意网站。<br>受害者会同时访问恶意网站与受信任的站点会话的时候。攻击包括一系列步骤，如下:</p><p>-受害者用户使用他/她的用户名和密码登录到可信站点,从而创建一个新的会话。<br>-受信任站点存储受害者会话的 cookie 或 session 在受害者用户的 web 浏览器端。<br>-受害者用户在不退出信任网站时就去访问恶意网站。<br>-恶意网站的网页发送一个请求到受害者的受信任的站点用户的浏览器。<br>-web 浏览器将自动连接会话 cookie，因为它是恶意的要求针对可信站点。<br>-受信任的站点如果受到 CSRF 攻击，攻击者的一些恶意的请求会被攻击者发送给信任站点。<br>恶意网站可以建立HTTP GET或POST请求到受信任的站点。一些HTML标签,比如img iframe,框架,形式没有限制的URL,<br>可以在他们的使用属性中。img,iframe,框架可用于构造GET请求。<br>HTML表单标签可用于构造POST请求。构造GET请求是相对容易的,因为它甚至不需要JavaScript的帮助;<br>构造POST请求需要JavaScript。因为Collabtive只针对后者,本实验的任务将只涉及HTTP POST请求。</p><p>#预备知识：什么是CSRF</p><blockquote><p>百度百科–CSRF<br>CSRF(Cross-site request forgery)：中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF；<br>作用：攻击者盗用了你的身份，以你的名义发送恶意请求；<br>造成的危害包括：个人隐私泄露以及财产安全，以受害者的名义发送邮件、消息、盗取账号，甚至于购买商品，虚拟货币转账等。</p></blockquote><table><thead><tr><th>资产</th><th>负债</th><th>股东权益</th></tr></thead><tbody><tr><td>在建工程</td><td>贷款</td><td>股本</td></tr></tbody></table>  <table><thead><tr><th>资产</th><th>负债</th><th>股东权益</th></tr></thead><tbody><tr><td>在建工程</td><td>贷款</td><td>股本</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>信息安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/10/22/hello-world/"/>
    <url>2019/10/22/hello-world/</url>
    
    <content type="html"><![CDATA[<img src="https://faithlove.github.io/pic/2018/HexoThumb/topPicPre.png" srcset="/img/loading.gif" width=100% />哇，漂亮的小姐姐(❤ ω ❤)<a id="more"></a>Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span> ****</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="undefined2018/04/25/test/"/>
    <url>2018/04/25/test/</url>
    
    <content type="html"><![CDATA[<blockquote><p>content</p><footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><p>引用 Twitter</p><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><p>gist</p><script src="//gist.github.com/199bc1a29687f7ae6da0180836b5354b.js?file=find"></script><script src="//gist.github.com/e95044ca4535fc4c268c41458bf4cc32.js?file=listen1_myplaylist_2782ed18-652e-be76-614c-af33c7deb4e8.md"></script>  <script src="//gist.github.com/e95044ca4535fc4c268c41458bf4cc32.js?file=listen1_myplaylist_32e123f4-59ed-907c-ad9f-9c3c77cb80b1.md"></script>  <p>网易云</p><iframe src="//music.163.com/outchain/player?type=0&id=2025535275&auto=1&height=90" width="[width]" height="[height]" frameborder="0" allowfullscreen></iframe><img src="/img/2.jpg" srcset="/img/loading.gif" width=100%  alt=""/><a id="more"></a><img src="/img/2.jpg" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><pre><code>title: xxxxxdate: 2085-01-16 07:33:44tags: [hexo]photos:http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpghttp://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</code></pre><p>作者：格子林ll<br>链接：<a href="https://www.jianshu.com/p/e0058573964c" target="_blank" rel="noopener">https://www.jianshu.com/p/e0058573964c</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
      <category>Java</category>
      
      <category>Python</category>
      
      <category>javaScript</category>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试1</title>
    <link href="undefined2018/04/25/test1/"/>
    <url>2018/04/25/test1/</url>
    
    <content type="html"><![CDATA[<img src="https://faithlove.github.io/pic/2018/RMTP_1/topPicPre.png" srcset="/img/loading.gif" width=100% />哇，漂亮的小姐姐(❤ ω ❤)<a id="more"></a><img src="/img/favicon.png" srcset="/img/loading.gif" class="[class names]" title="[width] [height] title text " alt="alt text"><pre><code>title: xxxxxdate: 2085-01-16 07:33:44tags: [hexo]photos:http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpghttp://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</code></pre><p>作者：格子林ll<br>链接：<a href="https://www.jianshu.com/p/e0058573964c" target="_blank" rel="noopener">https://www.jianshu.com/p/e0058573964c</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
      <category>Java</category>
      
      <category>Python</category>
      
      <category>javaScript</category>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>标签1</tag>
      
      <tag>标签2</tag>
      
      <tag>标签3</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>